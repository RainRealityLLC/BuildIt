doctype html
// WORKING ADDTEXT AND UNITY TRANSFORM CONTROLS.
html(lang='en')
  head
    title three.js webgl - transform controls
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0')
    style.
      body {
      margin: 0px;
      background-color: #ffffff;
      color: #fff;
      font-family:Monospace;
      text-align: center;
      font-size: 15px;
      line-height: 30px;
      overflow: hidden;
      }
      #info {
      position: absolute;
      top: 0px; width: 100%;
      padding: 15px;
      z-index:100;
      }
      p {
      color: #000000;
      }
      #threejsscene {
      padding-top: 100px;
      }
  body
    #info
      p
        | "W" translate | "E" rotate | "R" scale | "+" increase size | "-" decrease size
        br
        |             Press "Q" to toggle world/local space, keep "Ctrl" down to snap to grid
    script(src='http://cdnjs.cloudflare.com/ajax/libs/three.js/84/three.min.js')
    script(src='https://threejs.org/examples/js/controls/TransformControls.js')
    #threejsscene
      script.
        var camera, scene, renderer, control;
        var textlabels = [];
        init();
        render();
        function init() {
        renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth/(3/2), window.innerHeight/(3/2) );
        document.body.appendChild( renderer.domElement );
        //
        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 3000 );
        camera.position.set( 1000, 500, 1000 );
        camera.lookAt( new THREE.Vector3( 0, 200, 0 ) );
        scene = new THREE.Scene();
        scene.add( new THREE.GridHelper( 1000, 10 ) );
        var light = new THREE.DirectionalLight( 0xffffff, 2 );
        light.position.set( 1, 1, 1 );
        scene.add( light );
        scene.translateY(50);
        var texture = new THREE.TextureLoader().load( 'textures/crate.gif', render );
        texture.mapping = THREE.UVMapping;
        texture.anisotropy = renderer.getMaxAnisotropy();
        var geometry = new THREE.BoxGeometry( 200, 200, 200 );
        var material = new THREE.MeshLambertMaterial( { map: texture } );
        control = new THREE.TransformControls( camera, renderer.domElement );
        control.addEventListener( 'change', render );
        var mesh = new THREE.Mesh( geometry, material );
        scene.add( mesh );
        control.attach( mesh );
        scene.add( control );
        window.addEventListener( 'resize', onWindowResize, false );
        window.addEventListener( 'keydown', function ( event ) {
        switch ( event.keyCode ) {
        case 81: // Q
        control.setSpace( control.space === "local" ? "world" : "local" );
        break;
        case 17: // Ctrl
        control.setTranslationSnap( 100 );
        control.setRotationSnap( THREE.Math.degToRad( 15 ) );
        break;
        case 87: // W
        control.setMode( "translate" );
        break;
        case 69: // E
        control.setMode( "rotate" );
        break;
        case 82: // R
        control.setMode( "scale" );
        break;
        case 187:
        case 107: // +, =, num+
        control.setSize( control.size + 0.1 );
        break;
        case 189:
        case 109: // -, _, num-
        control.setSize( Math.max( control.size - 0.1, 0.1 ) );
        break;
        }
        });
        window.addEventListener( 'keyup', function ( event ) {
        switch ( event.keyCode ) {
        case 17: // Ctrl
        control.setTranslationSnap( null );
        control.setRotationSnap( null );
        break;
        }
        });
        }
        function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth/(3/2), window.innerHeight/(3/2) );
        render();
        }
        function render() {
        control.update();
        renderer.render( scene, camera );
        }
        function addText() {
        var material = new THREE.MeshBasicMaterial({
        color: 0x00000000
        });
        var geometry = new THREE.CylinderGeometry(0, 0, 0, 0, 0);
        var mesh2 = new THREE.Mesh(geometry, material);
        mesh2.position.x = (Math.random() - 0.5) * 1000;
        mesh2.position.y = (Math.random() - 0.5) * 1000;
        mesh2.position.z = (Math.random() - 0.5) * 1000;
        mesh2.updateMatrix();
        mesh2.matrixAutoUpdate = false;
        scene.add(mesh2);
        var text = _createTextLabel();
        var textValue = prompt("What text would you like to include?")
        text.setHTML(textValue);
        text.setParent(mesh2);
        textlabels.push(text);
        container = document.getElementById('container');
        if (container != null) {
        container.appendChild(text.element);
        }
        var _animate = function() {
        requestAnimationFrame(animate);
        control.update();
        _render();
        }
        _animate();
        }
        function _render() {
        for(var i=0; i<textlabels.length; i++) {
        textlabels[i].updatePosition();
        }
        renderer.render(scene, camera);
        }
        function animate() {
        requestAnimationFrame(animate);
        control.update();
        render();
        }
        function _createTextLabel() {
        var div = document.createElement('div');
        div.className = 'text-label';
        div.style.position = 'absolute';
        div.style.width = 100;
        div.style.height = 100;
        div.innerHTML = "hi there!";
        div.style.top = -1000;
        div.style.left = -1000;
        var _this = this;
        return {
        element: div,
        parent: false,
        position: new THREE.Vector3(0,0,0),
        setHTML: function(html) {
        this.element.innerHTML = html;
        },
        setParent: function(threejsobj) {
        this.parent = threejsobj;
        },
        updatePosition: function() {
        if(parent) {
        this.position.copy(this.parent.position);
        }
        var coords2d = this.get2DCoords(this.position, _this.camera);
        this.element.style.left = coords2d.x + 'px';
        this.element.style.top = coords2d.y + 'px';
        },
        get2DCoords: function(position, camera) {
        var vector = position.project(camera);
        vector.x = (vector.x + 1)/2 * window.innerWidth;
        vector.y = -(vector.y - 1)/2 * window.innerHeight;
        return vector;
        }
        }
        }
    #container
    button(onclick='addText()') Add Text